// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sdk/pod_exec.go
//
// Generated by this command:
//
//	mockgen -source internal/sdk/pod_exec.go -destination internal/sdk/fake/fake_pod_exec.go -package fake
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	io "io"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPodExec is a mock of PodExec interface.
type MockPodExec struct {
	ctrl     *gomock.Controller
	recorder *MockPodExecMockRecorder
	isgomock struct{}
}

// MockPodExecMockRecorder is the mock recorder for MockPodExec.
type MockPodExecMockRecorder struct {
	mock *MockPodExec
}

// NewMockPodExec creates a new mock instance.
func NewMockPodExec(ctrl *gomock.Controller) *MockPodExec {
	mock := &MockPodExec{ctrl: ctrl}
	mock.recorder = &MockPodExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodExec) EXPECT() *MockPodExecMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPodExec) Execute(ctx context.Context, cmdURL *url.URL, stdin io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, cmdURL, stdin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockPodExecMockRecorder) Execute(ctx, cmdURL, stdin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPodExec)(nil).Execute), ctx, cmdURL, stdin)
}
